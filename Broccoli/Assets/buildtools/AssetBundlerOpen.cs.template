using UnityEngine;
using UnityEditor;
using System.IO;
using System.Collections;
using System.Collections.Generic;

public class AssetBundler
	: MonoBehaviour
{
	public static string outputPath = "";
	public static List<string> assetPaths = new List<string>();
	public static List<Object> assets = new List<Object>();


    [MenuItem("Test/Build Asset Bundles")]
    public static void TestBundle()
    {
        Bundle();
    }

	public static void Bundle()
	{
		BuildList();

		Debug.LogFormat("AssetBundler.Bundle(): bundling {0} items", assetPaths.Count);

		var assets = new List<Object>();
        var asset_paths_cleaned = new List<string>();

		foreach (var path in assetPaths)
		{
			// TODO: need to handle all types

			var asset_filename = Path.GetFileName(path);
			var asset_path = Path.Combine("Assets", asset_filename);

            asset_paths_cleaned.Add(asset_path.ToString());

			Debug.LogFormat("> {0} -> {1}", path, asset_path.ToString());

			var shader = AssetDatabase.LoadAssetAtPath<Shader>(asset_path.ToString());

			assets.Add(shader);
		}


        // single platform
        var build = new AssetBundleBuild();

        build.assetBundleName = "generated.assetbundle";
        build.assetNames = asset_paths_cleaned.ToArray();

        // per platform
        var build_map = new List<AssetBundleBuild>();

        build_map.Add(build);
     
		var manifest = BuildPipeline.BuildAssetBundles(
			"Assets/Generated",
            build_map.ToArray(),
			BuildAssetBundleOptions.UncompressedAssetBundle,
			BuildTarget.StandaloneWindows
		);

		if (manifest != null)
		{
			Debug.LogFormat("> manifest {0}", manifest.ToString());
			Debug.LogFormat("> name: {0}", manifest.name);
			Debug.LogFormat("> files: {0}", manifest.GetAllAssetBundles().Length);
		}

		Debug.LogFormat("AssetBundler.Bundle(): done");
	}

	public static void BuildList()
	{
		// paths added below
